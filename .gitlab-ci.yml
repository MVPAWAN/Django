stages:
  - test
  - build
  - scan
  - dast
  - deploy



test:
  stage: test
  image: python:3.7-buster
  script:
  # This configures the test stuff
  - apt-get update -qy
  - apt-get install -y python-dev python-pip
  - pip install -r src/requirements.txt
  - flake8 vuln_django --max-line-length=127
  - cd src
  - python manage.py test

docker-build:
  stage: build
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  script:
    - docker build -t vuln_django:latest .

hawk_scan_execute:
  stage: scan
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  script:
    - docker build -t vuln_django:latest .
    - docker network create scan_net
    - docker pull stackhawk/hawkscan:latest
    - docker run --detach -p 8020:8020 --name vuln-django --rm --network scan_net vuln_django:latest
    - |
      docker run --volume $(pwd):/hawk:rw --tty --rm --network scan_net \
        --env API_KEY="hawk.${HAWK_API_ID}.${HAWK_API_SECRET}" \
        --env BRANCH="${CI_COMMIT_BRANCH}" \
        --env NO_COLOR=true \
        stackhawk/hawkscan:latest stackhawk.yml stackhawk-gitlab.yml

include:
  - template: DAST.gitlab-ci.yml

zap_scan_execute:
  stage: dast
  variables:
    DAST_WEBSITE: http://vuln-django
    DAST_AUTH_URL: /admin/login
    DAST_USERNAME: admin
    DAST_PASSWORD: adminpassword
    DAST_USERNAME_FIELD: username
    DAST_PASSWORD_FIELD: password
    DAST_AUTH_EXCLUDE_URLS: http://vuln-django/admin/logout
    DAST_FULL_SCAN_ENABLED: "true"
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  script:
    - docker build -t vuln_django:latest .
    - docker network create scan_net
    - docker run --detach -p 8020:8020 --name vuln-django --rm --network scan_net vuln_django:latest
    - |
      docker run --network scan_net --rm --it \
        --volume $(pwd)/wrk:/zap/wrk:rw \
        --volume $(pwd)/wrk:/output:rw \
        registry.gitlab.com/gitlab-org/security-products/dast:${VERSION:-latest} /analyze \
        -r report.html
